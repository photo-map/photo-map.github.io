{"version":3,"sources":["Application/components/HelpTip.jsx","Application/constants.js","Application/utils/gapiRequest.js","Application/utils/gDriveFilesApi.js","Application/helpers/filesListHelpers.js","Application/components/Message/index.jsx","Application/Map/GoogleMap/GoogleMapWrapper.jsx","Application/Map/GoogleMap/GoogleMapCompose.jsx","Application/Map/GoogleMap/PhotoMarker.jsx","Application/Map/GoogleMap/helpers.js","Application/Map/GoogleMap/index.jsx","Application/MenuDrawer/FolderList.jsx","Application/Map/helpers.js","Application/Map/index.jsx","Application/Map/AMap/helpers.js","Application/Map/AMap/index.jsx","Application/Map/MapSelector.jsx","Application/MenuDrawer/Title.jsx","Application/helpers/renderGoogleLoginBtn.js","Application/MenuDrawer/GoogleLogin.jsx","Application/config.js","Application/MenuDrawer/helpers.js","Application/MenuDrawer/ConfigSection.jsx","Application/MenuDrawer/index.jsx","Application/init.js","Application/Warning.jsx","Application/index.jsx","serviceWorker.js","index.js"],"names":["HelpTip","props","content","children","title","QuestionCircleOutlined","GOOGLE_MAP","A_MAP","PRIVATE_FOLDER_ID","gapiRequest","requestOpts","Promise","resolve","reject","window","gapi","client","request","execute","resp","filesGet","params","a","path","fileId","filesList","filesFields","join","getFolderInfo","folderId","getPhotosInFolder","q","fields","getPhotoMapFolder","getPhotos","setMediaItems","foldersResp","files","id","Message","message","className","handleClick","event","latLng","console","log","toString","GoogleMapWrapper","defaultZoom","defaultCenter","defaultOptions","mapTypeControlOptions","position","google","maps","ControlPosition","TOP_RIGHT","mapTypeId","ref","refCallback","onClick","debug","debugModule","GoogleMapCompose","compose","withProps","ownerProps","googleMapURL","process","loadingElement","style","height","containerElement","mapElement","withHandlers","refs","map","undefined","onMapMounted","onMapUnmounted","withScriptjs","withGoogleMap","PhotoMarker","useState","open","setOpen","onCloseClick","src","icon","url","alt","fitMarkers","folders","length","bounds","LatLngBounds","forEach","folder","visible","file","extend","lat","imageMediaMetadata","location","latitude","lng","longitude","fitBounds","GoogleMapComponent","locationGetFromGoogleMap","locationGetFromSateliteImage","GoogleMap","handleMapMounted","handleMapUnmounted","fitMarkersSubscriber","msg","error","addSubscribers","fitMarkersToken","PubSub","subscribe","FIT_MARKERS_TOPIC","removeSubscribers","unsubscribe","renderPhotoMarkers","markers","anchor","x","y","labelOrigin","scaledSize","width","thumbnailLink","push","key","JSON","stringify","this","mapRef","index","markerProps","label","Component","ADD_PUBLIC_FOLDER_TOPIC","localStorageKeyPublicFolders","localStorageKeyPrivateFolderVisible","encode","value","folderInfo","decode","parse","localStorage","getItem","FolderList","state","privateFolderVisible","publicFolders","handleChange","checked","target","updatePrivateFolderVisible","publish","SHOW_MARKERS_TOPIC","HIDE_MARKERS_TOPIC","openDrawerToken","addPublicFolderSubscriber","addPublicFolder","setState","setItem","newPublicFolderState","updatePublicFolderVisiable","newState","updateMarkersVisible","removePublicFolder","prevState","filter","removeMarkersInFolder","REMOVE_MARKERS_IN_FOLDER_TOPIC","renderPublicFolders","renderPublicFolder","onChange","folderName","onConfirm","onCancel","okText","cancelText","size","type","getPhotosInPublicFolder","Error","name","getPhotosInPublicFolders","foldersObj","all","Object","keys","addMarkerToAMap","ADD_MARKERS_TOPIC","amapCenter","googleMapCenter","localStorageKeySelectedMap","SWITCH_MAP_TOPIC","Map","handleMapChange","setMap","handleRenderFinish","handleLoginSuccess","user","privatePhotos","foundPrivateFolder","selectedMap","handleAMapInstanceCreated","AMap","amapLoaded","handleSignedOut","REMOVE_ALL_MARKERS_TOPIC","handleDrawerOpen","OPEN_DRAWER_TOPIC","switchMapToken","switchMapSubscriber","showMarkersToken","showMarkersSubscriber","hideMarkersToken","hideMarkersSubscriber","updateMarkersInFolderVisible","newFolders","onMapInstanceCreated","onRenderFinish","onLoginSuccess","onSignedOut","onMapChange","getMarkersInFolder","markersInFolder","getAllOverlays","marker","getExtData","allMarkers","addMarkersToken","addMarkersSubscriber","removeAllMarkersToken","removeAllMarkersSubscriber","removeMarkersInFolderToken","removeMarkersInFolderSubscriber","data","addMarkers","removeAllMarkers","setFitView","show","hide","genMarker","photo","Marker","lnglat","Icon","Size","image","thumbnail","imageSize","extData","lnglats","convertFrom","status","result","info","locations","resLnglat","webViewLink","on","infoWindow","InfoWindow","offset","Pixel","setContent","getPosition","alert","remove","events","created","instance","click","mapsEvent","lngLat","amapkey","version","center","zoom","radioStyle","display","lineHeight","MapSelector","Group","Title","OutboundLink","eventLabel","to","scopeNeeded","GoogleLogin","gapiAuth2Loaded","signedIn","handleSignOutBtnClick","auth2","getAuthInstance","signOut","then","ReactGA","category","action","renderLoginBtn","googleAuth","isSignedIn","get","renderSignOutBtn","load","init","client_id","scope","attachClickHandler","listen","currentUser","signin2","render","onsuccess","onfailure","b","c","renderGoogleLoginBtn","link2Id","link","replace","exportConfig","storageObj","encodeURIComponent","importConfig","configObj","ConfigSection","handleDownload","href","downloadRef","current","handleImport","inputRef","Response","text","obj","React","createRef","download","OPEN_CLOSE_DRAWER_TOPIC","MenuDrawer","drawerVisible","publicFolderLink","loading","handleDrawerClose","setVisible","handlePublicFolderLinkChange","handlePublicFolderInputPressEnter","loadPublicFolderAndAddMarkers","handleLoadPublicFolderBtnClick","warn","openDrawerSubscriber","openCloseDrawerSubscriber","openCloseDrawerToken","placement","closable","forceRender","onClose","onPressEnter","disabled","initGa","initialize","registerShortcut","document","addEventListener","code","initGapiClient","Warning","rel","Application","gapiLoaded","gapiClientLoading","initApplication","gapiLoadedFlag","loadGapiClient","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4edcb15a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Popover } from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nexport default function HelpTip(props) {\n  return (\n    <Popover content={props.children} title={null}>\n      <QuestionCircleOutlined />\n    </Popover>\n  );\n}\n","export const GOOGLE_MAP = \"google\";\nexport const A_MAP = \"amap\";\nexport const DEFAULT_SELECTED_MAP = A_MAP;\n\nexport const PRIVATE_FOLDER_ID = \"__privateFolderId__\";\n","/**\n * Send Google API request\n *\n * @export\n * @param {*} requestOpts\n * @returns\n */\nexport default function gapiRequest(requestOpts) {\n  return new Promise((resolve, reject) => {\n    // https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiclientrequestargs--\n    var restRequest = window.gapi.client.request(requestOpts);\n    restRequest.execute((resp) => {\n      resolve(resp);\n    });\n  });\n}\n","import gapiRequest from \"./gapiRequest\";\n\n/**\n * API: https://developers.google.com/drive/api/v3/reference/files/get#request\n * @param {Object} params https://developers.google.com/drive/api/v3/reference/files/get#parameters\n * @returns {Promise<FilesGetResponse>}\n */\nexport const filesGet = async (params) =>\n  await gapiRequest({\n    path: `https://www.googleapis.com/drive/v3/files/${params.fileId}`,\n  });\n\n/**\n * API: https://developers.google.com/drive/api/v3/reference/files/list#request\n * @returns {Promise<FilesListResponse>}\n */\nexport const filesList = async (params) =>\n  await gapiRequest({\n    path: \"https://www.googleapis.com/drive/v3/files\",\n    params,\n  });\n","import { filesGet, filesList } from \"../utils/gDriveFilesApi\";\n\nconst filesFields = [\n  \"files/imageMediaMetadata/location\",\n  \"files/thumbnailLink\",\n  \"files/webContentLink\", // original photo link, can used in <img> tag\n  \"files/webViewLink\", // Google Drive link to preview this photo.\n].join(\",\");\n\n// Sample response:\n// {\n//   id: \"1nem5ZFB1xj3NuLT3aknYs7z4KTk6Cya6\"\n//   kind: \"drive#file\"\n//   mimeType: \"application/vnd.google-apps.folder\"\n//   name: \"2020-05-21 莲石湖公园\"\n// }\nexport const getFolderInfo = async (folderId) =>\n  await filesGet({\n    fileId: folderId,\n  });\n\n/**\n * Get all photos in a folder\n * @todo Filter out the response, leave only the photos with GPS locations,\n *       maybe popup some warning about photos without GPS locations.\n */\nexport const getPhotosInFolder = async (folderId) =>\n  await filesList({\n    q: `'${folderId}' in parents and (mimeType='image/jpeg' or mimeType='image/png')`, // get files in this folder\n    // fields: \"files/*\", // debug\n    fields: filesFields, // location and photo link\n  });\n\n/**\n * resp = {\n *   files: [{\n *     \"kind\": \"drive#file\",\n *     \"id\": \"1Kv...MF\",\n *     \"name\": \"Photo Map\",\n *     \"mimeType\": \"application/vnd.google-apps.folder\"\n *   }]\n * }\n */\nconst getPhotoMapFolder = async () =>\n  await filesList({\n    // Find resource name is \"Photo Map\", type is folder\n    q: \"name='Photo Map' and mimeType='application/vnd.google-apps.folder'\",\n  });\n\n/**\n * @export\n * @returns Promise<Files[]> Files type: https://developers.google.com/drive/api/v3/reference/files\n */\nexport const getPhotos = async (setMediaItems) => {\n  const foldersResp = await getPhotoMapFolder();\n  const folderId = foldersResp.files[0].id;\n  const resp = await getPhotosInFolder(folderId);\n  // resp: {\n  //   \"files\": [\n  //     {\n  //       \"thumbnailLink\": \"https://lh3.googleusercontent.com/rSd...220\",\n  //       \"imageMediaMetadata\": {\n  //         \"location\": {\n  //           \"latitude\": 1,\n  //           \"longitude\": 103,\n  //           \"altitude\": 456\n  //         }\n  //       }\n  //     }\n  //   ]\n  // }\n  return resp.files;\n};\n","import React from \"react\";\nimport \"./index.css\";\n\nexport default function Message(props) {\n  const { message } = props;\n  if (!message) {\n    return null;\n  }\n  return (\n    <div className=\"message-wrapper\">\n      <div className=\"message-body\">\n        <span className=\"message-content\">{message}</span>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GoogleMap } from \"react-google-maps\";\n\n/**\n * google.maps.LatLng\n * @typedef {Object} LatLng\n */\n\n/**\n * This object is returned from various mouse events on the map and overlays, and contains all the fields shown below.\n * Checkout the {@link https://developers.google.com/maps/documentation/javascript/reference/map#MouseEvent API document}\n * @typedef {Object} MouseEvent\n * @property {LatLng} latLng\n */\n\n/**\n * Checkout the {@link https://developers.google.com/maps/documentation/javascript/reference/map#Map.click API document} for this \"click\" event\n * @param {MouseEvent} event\n */\nfunction handleClick(event) {\n  // @type {LatLng} https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLng\n  const { latLng } = event;\n  console.log(`You click on the Google Maps, latLng: ${latLng.toString()}`);\n}\n\nconst GoogleMapWrapper = (props) => (\n  <GoogleMap\n    defaultZoom={props.defaultZoom}\n    defaultCenter={props.defaultCenter}\n    defaultOptions={{\n      mapTypeControlOptions: {\n        // style: window.google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n        position: window.google.maps.ControlPosition.TOP_RIGHT,\n      },\n    }}\n    mapTypeId=\"satellite\"\n    ref={props.refCallback}\n    onClick={handleClick}\n  >\n    {props.children}\n  </GoogleMap>\n);\n\nGoogleMapWrapper.propTypes = {\n  onMapMounted: PropTypes.func.isRequired,\n  onMapUnmounted: PropTypes.func.isRequired,\n};\n\nexport default GoogleMapWrapper;\n","import React from \"react\";\nimport { compose, withProps, withHandlers } from \"recompose\";\nimport { withScriptjs, withGoogleMap } from \"react-google-maps\";\nimport debugModule from \"debug\";\n\nconst debug = debugModule(\n  \"photo-map:src/Application/Map/GoogleMap/GoogleMapCompose.jsx\"\n);\n\nconst GoogleMapCompose = compose(\n  withProps((ownerProps) => ({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: \"100%\" }} />,\n    containerElement: <div style={{ height: \"100vh\" }} />,\n    mapElement: <div style={{ height: \"100%\" }} />,\n  })),\n  withHandlers((ownerProps) => {\n    const refs = {\n      map: undefined,\n    };\n\n    return {\n      /**\n       * React will call the `ref` callback with the DOM element when the component mounts,\n       * and call it with `null` when it unmounts.\n       * @see https://reactjs.org/docs/refs-and-the-dom.html\n       */\n      refCallback: () => (ref) => {\n        debug(\"refCallback()()\", ref);\n        refs.map = ref;\n\n        if (ref === null) {\n          ownerProps.onMapUnmounted();\n          return;\n        }\n        ownerProps.onMapMounted(ref);\n      },\n      // onZoomChanged: ({ onZoomChange }) => () => {\n      //   onZoomChange(refs.map.getZoom())\n      // }\n    };\n  }),\n  withScriptjs,\n  withGoogleMap\n);\n\nexport default GoogleMapCompose;\n","import React, { useState } from \"react\";\nimport { Marker, InfoWindow } from \"react-google-maps\";\n\nexport default function PhotoMarker(props) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Marker {...props} onClick={() => setOpen(true)}>\n      {open && (\n        <InfoWindow onCloseClick={() => setOpen(false)}>\n          <div>\n            <img src={props.icon.url} alt=\"Photos\" />\n          </div>\n        </InfoWindow>\n      )}\n    </Marker>\n  );\n}\n","export const fitMarkers = (map, folders) => {\n  if (folders.length === 0) {\n    return;\n  }\n\n  // @type {google.maps.LatLngBounds} https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLngBounds\n  const bounds = new window.google.maps.LatLngBounds();\n\n  folders.forEach((folder) => {\n    if (folder.visible === false) return;\n    folder.files.forEach((file) => {\n      // extend(point), point is type of LatLng\n      bounds.extend({\n        lat: file.imageMediaMetadata.location.latitude,\n        lng: file.imageMediaMetadata.location.longitude,\n      });\n    });\n  });\n\n  map.fitBounds(bounds);\n};\n","import React, { Component } from \"react\";\nimport { Marker } from \"react-google-maps\";\nimport PubSub from \"pubsub-js\";\nimport debugModule from \"debug\";\n\nimport { FIT_MARKERS_TOPIC } from \"../\";\nimport GoogleMapWrapper from \"./GoogleMapWrapper\";\nimport GoogleMapCompose from \"./GoogleMapCompose\";\nimport PhotoMarker from \"./PhotoMarker\";\nimport { fitMarkers } from \"./helpers\";\n// import { photoMarker, photoMarker2 } from \"../markers.jsx\";\n\nconst debug = debugModule(\"photo-map:src/Application/Map/GoogleMap/index.jsx\");\nconst GoogleMapComponent = GoogleMapCompose(GoogleMapWrapper);\n\nconst locationGetFromGoogleMap = {\n  lat: 39.873806,\n  lng: 116.22555,\n};\nconst locationGetFromSateliteImage = {\n  lat: 39.872542,\n  lng: 116.219536,\n};\n// const latOffset =locationGetFromGoogleMap.lat-locationGetFromSateliteImage.lat\n// const lngOffset =locationGetFromGoogleMap.lng-locationGetFromSateliteImage.lng\n\n/**\n * Marker - https://developers.google.com/maps/documentation/javascript/markers\n *\n * @param {*} props\n * @returns\n */\n// function GoogleMap(props) {\n\n// }\nclass GoogleMap extends Component {\n  componentDidMount() {\n    this.addSubscribers();\n  }\n\n  componentWillUnmount() {\n    this.removeSubscribers();\n  }\n\n  handleMapMounted = (map) => {\n    debug(\"handleMapMounted()\", map);\n    this.map = map;\n\n    fitMarkers(map, this.props.folders);\n  };\n\n  handleMapUnmounted = () => {\n    debug(\"handleMapUnmounted()\");\n  };\n\n  fitMarkersSubscriber = (msg) => {\n    debug(\"fitMarkersSubscriber()\", msg);\n\n    if (!this.map) {\n      console.error(\"this.map of Google Map is undefined!\");\n      return;\n    }\n\n    fitMarkers(this.map, this.props.folders);\n  };\n\n  addSubscribers = () => {\n    this.fitMarkersToken = PubSub.subscribe(\n      FIT_MARKERS_TOPIC,\n      this.fitMarkersSubscriber\n    );\n  };\n\n  removeSubscribers = () => {\n    PubSub.unsubscribe(this.fitMarkersToken);\n  };\n\n  renderPhotoMarkers = () => {\n    const markers = [];\n    this.props.folders.forEach((folder) => {\n      if (folder.visible === false) return;\n      folder.files.forEach((file) => {\n        const icon = {\n          anchor: { x: 0, y: 0 },\n          labelOrigin: { x: 0, y: 0 },\n          // origin: {x:0,y:0},\n          scaledSize: {\n            // img size\n            height: 64,\n            width: 64,\n          },\n          // size: { // div size\n          //   height: 100,\n          //   width: 200,\n          // },\n          url: file.thumbnailLink,\n        }; /* Icon */\n        markers.push(\n          <PhotoMarker\n            key={JSON.stringify(file)}\n            position={\n              {\n                lat: file.imageMediaMetadata.location.latitude,\n                lng: file.imageMediaMetadata.location.longitude,\n              } /* LatLngLiteral */\n            }\n            icon={icon}\n          />\n        );\n      });\n    });\n    return markers;\n  };\n\n  render() {\n    debug(\"render()\", this.props);\n    const { defaultZoom, defaultCenter, markers } = this.props;\n\n    return (\n      <GoogleMapComponent\n        ref={this.mapRef}\n        defaultZoom={defaultZoom}\n        defaultCenter={defaultCenter}\n        onMapMounted={this.handleMapMounted}\n        onMapUnmounted={this.handleMapUnmounted}\n      >\n        {markers.map(({ ...markerProps }, index) => {\n          return <Marker key={index} {...markerProps}></Marker>;\n        })}\n        <Marker label=\"Map\" position={locationGetFromGoogleMap} />\n        <Marker label=\"Satelite\" position={locationGetFromSateliteImage} />\n        {/*<PhotoMarker {...photoMarker} />\n      <PhotoMarker {...photoMarker2} />*/}\n        {this.renderPhotoMarkers()}\n      </GoogleMapComponent>\n    );\n  }\n}\n\nexport default GoogleMap;\n","import React, { Component } from \"react\";\nimport { Checkbox, Button, Popconfirm } from \"antd\";\nimport PubSub from \"pubsub-js\";\nimport debugModule from \"debug\";\n\nimport {\n  SHOW_MARKERS_TOPIC,\n  HIDE_MARKERS_TOPIC,\n  REMOVE_MARKERS_IN_FOLDER_TOPIC,\n} from \"../Map/AMap\";\nimport { PRIVATE_FOLDER_ID } from \"../constants\";\n\nconst debug = debugModule(\n  \"photo-map:src/Application/MenuDrawer/FolderList.jsx\"\n);\n\nexport const ADD_PUBLIC_FOLDER_TOPIC = \"publicfolder.add\";\nexport const localStorageKeyPublicFolders = \"pmap:publicFolders\";\nexport const localStorageKeyPrivateFolderVisible = \"pmap:privateFolderVisible\";\n\n// Encode the public folders state to save in localStorage\n// React state --(encode)-> localStorage\nexport const encode = (value) => {\n  const content = {};\n  value.forEach((folderInfo) => {\n    content[folderInfo.folderId] = folderInfo.visible;\n  });\n  return JSON.stringify(content);\n};\n// Decode the public folders content in localStorage to save to state\n// localStorage --(decode)-> React state\nexport const decode = () => {\n  return JSON.parse(localStorage.getItem(localStorageKeyPublicFolders));\n};\n\nexport default class FolderList extends Component {\n  state = {\n    // Whether to show photos in the private folder.\n    privateFolderVisible: true,\n    // The folder id, name and visible of public folders.\n    // The key is folder ID from https://drive.google.com/drive/folders/13s5wep_gYYVCroQcFB6nJHMWz8V2Onsr?usp=sharing\n    // [\n    //   {folderId:\"13s5wep_gYYVCroQcFB6nJHMWz8V2Onsr\",visible:true,name:\"Dog Photos\"}\n    // ]\n    publicFolders: [],\n  };\n\n  componentDidMount() {\n    this.addSubscribers();\n\n    // Load state from localStorage\n    this.setState({\n      privateFolderVisible:\n        localStorage.getItem(localStorageKeyPrivateFolderVisible) === \"true\",\n    });\n  }\n\n  componentWillUnmount() {\n    this.removeSubscribers();\n  }\n\n  handleChange = (event) => {\n    const { checked } = event.target;\n    this.updatePrivateFolderVisible(checked);\n    PubSub.publish(checked ? SHOW_MARKERS_TOPIC : HIDE_MARKERS_TOPIC, {\n      folderId: PRIVATE_FOLDER_ID,\n    });\n  };\n\n  addSubscribers = () => {\n    this.openDrawerToken = PubSub.subscribe(\n      ADD_PUBLIC_FOLDER_TOPIC,\n      this.addPublicFolderSubscriber\n    );\n  };\n\n  removeSubscribers = () => {\n    PubSub.unsubscribe(this.openDrawerToken);\n  };\n\n  addPublicFolderSubscriber = (msg, folderInfo) => {\n    this.addPublicFolder(folderInfo);\n  };\n\n  updatePrivateFolderVisible = (visible) => {\n    this.setState({ privateFolderVisible: visible });\n    localStorage.setItem(localStorageKeyPrivateFolderVisible, visible);\n  };\n\n  /**\n   * @param {FolderInfo} folderInfo\n   * @memberof FolderList\n   */\n  addPublicFolder = (folderInfo) => {\n    const { publicFolders } = this.state;\n    const newPublicFolderState = [...publicFolders, folderInfo];\n    this.setState({\n      publicFolders: newPublicFolderState,\n    });\n    localStorage.setItem(\n      localStorageKeyPublicFolders,\n      encode(newPublicFolderState)\n    );\n  };\n\n  updatePublicFolderVisiable = (folderId, visible) => {\n    const { publicFolders } = this.state;\n    const newState = [...publicFolders];\n    newState.forEach((folderInfo, index) => {\n      if (folderInfo.folderId === folderId) {\n        newState[index] = { ...folderInfo, visible };\n      }\n    });\n    this.setState({\n      publicFolders: newState,\n    });\n    localStorage.setItem(localStorageKeyPublicFolders, encode(newState));\n  };\n\n  updateMarkersVisible = (visible, folderId) => {\n    PubSub.publish(visible ? SHOW_MARKERS_TOPIC : HIDE_MARKERS_TOPIC, {\n      folderId,\n    });\n  };\n\n  removePublicFolder = (folderId) => {\n    this.setState((prevState) => {\n      const newState = prevState.publicFolders.filter(\n        (folderInfo) => folderInfo.folderId !== folderId\n      );\n      localStorage.setItem(localStorageKeyPublicFolders, encode(newState));\n      return { publicFolders: newState };\n    });\n  };\n\n  removeMarkersInFolder = (folderId) => {\n    PubSub.publish(REMOVE_MARKERS_IN_FOLDER_TOPIC, {\n      folderId,\n    });\n  };\n\n  renderPublicFolders = () => {\n    const { publicFolders } = this.state;\n\n    if (publicFolders.length === 0) {\n      return \"No data\";\n    }\n\n    return publicFolders.map(this.renderPublicFolder);\n  };\n\n  renderPublicFolder = (folderInfo) => {\n    const { folderId } = folderInfo;\n    const handleChange = (event) => {\n      this.updatePublicFolderVisiable(folderId, event.target.checked);\n      this.updateMarkersVisible(event.target.checked, folderId);\n    };\n\n    const handleDelete = () => {\n      this.removePublicFolder(folderId);\n      this.removeMarkersInFolder(folderId);\n    };\n\n    return (\n      <div key={folderInfo.folderId}>\n        <Checkbox checked={folderInfo.visible} onChange={handleChange}>\n          {folderInfo.folderName} : {folderInfo.folderId}{\" \"}\n          <Popconfirm\n            title=\"Are you sure delete this folder?\"\n            onConfirm={handleDelete}\n            onCancel={() => {}}\n            okText=\"Yes\"\n            cancelText=\"No\"\n          >\n            <Button size=\"small\" type=\"danger\">\n              Del\n            </Button>\n          </Popconfirm>\n        </Checkbox>\n      </div>\n    );\n  };\n\n  render() {\n    debug(\"render()\", this.props, this.state);\n\n    return (\n      <div>\n        <div>\n          <h3>Private folder in Google Drive</h3>\n          <Checkbox\n            checked={this.state.privateFolderVisible}\n            onChange={this.handleChange}\n          >\n            \"Photo Map\" folder in Google Drive of the login user\n          </Checkbox>\n        </div>\n        <div>\n          <h3>Public folder in Google Drive</h3>\n          {this.renderPublicFolders()}\n        </div>\n      </div>\n    );\n  }\n}\n","import PubSub from \"pubsub-js\";\n\nimport { getFolderInfo, getPhotosInFolder } from \"../helpers/filesListHelpers\";\nimport {\n  localStorageKeyPrivateFolderVisible,\n  localStorageKeyPublicFolders,\n} from \"../MenuDrawer/FolderList\";\nimport { ADD_MARKERS_TOPIC } from \"./AMap\";\nimport { PRIVATE_FOLDER_ID } from \"../constants\";\n\nexport const getPhotosInPublicFolder = async (folderId) => {\n  const folderInfo = await getFolderInfo(folderId);\n  // Get photos from public folder\n  const resp = await getPhotosInFolder(folderId);\n  if (resp.error) {\n    console.error(\"Failed to get photos in a public folders, response:\", resp);\n    throw new Error(resp.error.message);\n  }\n  return {\n    files: resp.files,\n    visible: true,\n    folderId,\n    folderName: folderInfo.name,\n  };\n};\n\nexport const getPhotosInPublicFolders = async () => {\n  const foldersObj = JSON.parse(\n    localStorage.getItem(localStorageKeyPublicFolders)\n  );\n  if (!foldersObj) {\n    return [];\n  }\n  return await Promise.all(\n    Object.keys(foldersObj).map(async (folderId) => {\n      return await getPhotosInPublicFolder(folderId);\n    })\n  );\n};\n\nexport const addMarkerToAMap = async (files) => {\n  PubSub.publish(ADD_MARKERS_TOPIC, {\n    files,\n    visible:\n      localStorage.getItem(localStorageKeyPrivateFolderVisible) === \"true\",\n    folderId: PRIVATE_FOLDER_ID,\n  });\n\n  const folders = await getPhotosInPublicFolders();\n  folders.forEach((folder) => PubSub.publish(ADD_MARKERS_TOPIC, folder));\n};\n","import React, { Component } from \"react\";\nimport { Button } from \"antd\";\nimport PubSub from \"pubsub-js\";\nimport debugModule from \"debug\";\n\nimport {\n  GOOGLE_MAP,\n  A_MAP,\n  DEFAULT_SELECTED_MAP,\n  PRIVATE_FOLDER_ID,\n} from \"../constants\";\nimport { getPhotos } from \"../helpers/filesListHelpers\";\nimport Message from \"../components/Message\";\nimport GoogleMap from \"./GoogleMap\";\n// import { simpleMarker } from \"./markers\";\nimport AMap, { REMOVE_ALL_MARKERS_TOPIC } from \"./AMap\";\nimport MenuDrawer, { OPEN_DRAWER_TOPIC } from \"../MenuDrawer\";\nimport { ADD_PUBLIC_FOLDER_TOPIC } from \"../MenuDrawer/FolderList\";\nimport { getPhotosInPublicFolders, addMarkerToAMap } from \"./helpers\";\n\nconst debug = debugModule(\"photo-map:src/Application/Map/index.jsx\");\n\nconst amapCenter = { latitude: 39.871446, longitude: 116.215768 };\nconst googleMapCenter = { lat: 39.871446, lng: 116.215768 };\n\nexport const localStorageKeySelectedMap = \"pmap::selectedMap\";\nexport const SWITCH_MAP_TOPIC = \"map.switchmap\";\nexport const SHOW_MARKERS_TOPIC = \"amap.showmarkers\";\nexport const HIDE_MARKERS_TOPIC = \"amap.hidemarkers\";\n// Fitbounds to the markers showing on the map\nexport const FIT_MARKERS_TOPIC = \"googlemap.fitmarkers\";\n\nexport default class Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Folders in GDrive which contains photos\n      // [\n      //   {\"folderId\":\"\", \"files\":\"\"},\n      //   {\"folderId\":\"\", \"files\":\"\"}\n      // ]\n      folders: [],\n      amapLoaded: false,\n      message: \"Rendering Google login button...\",\n    };\n\n    this.state.selectedMap =\n      localStorage.getItem(localStorageKeySelectedMap) || DEFAULT_SELECTED_MAP;\n  }\n\n  componentDidMount() {\n    this.addSubscribers();\n  }\n\n  componentWillUnmount() {\n    this.removeSubscribers();\n  }\n\n  handleMapChange = (name) => {\n    this.setMap(name);\n  };\n\n  // GoogleLogin button render finished\n  handleRenderFinish = () => {\n    this.setState({ message: \"\" });\n  };\n\n  /**\n   * User success signed in Google account.\n   * @param {gapi.auth2.GoogleUser} user\n   */\n  handleLoginSuccess = async (user) => {\n    debug(\"handleLoginSuccess\", user);\n\n    this.setState({\n      message: \"Login successfully, try to load photos in Google Drive...\",\n    });\n\n    // Load photos in private folder of login user's Google Drive\n    const privatePhotos = await getPhotos();\n\n    this.setState({\n      message: \"\",\n    });\n\n    // Update private folder in state\n    let foundPrivateFolder = false;\n    const folders = this.state.folders.map((folder) => {\n      if (folder.folderId === PRIVATE_FOLDER_ID) {\n        foundPrivateFolder = true;\n        folder.files = privatePhotos;\n      }\n      return folder;\n    });\n    if (!foundPrivateFolder) {\n      folders.push({\n        folderId: PRIVATE_FOLDER_ID,\n        files: privatePhotos,\n      });\n    }\n    this.setState({ folders });\n\n    // Update public folder in state\n    const publicFolders = await getPhotosInPublicFolders();\n    this.setState({\n      folders: [...this.state.folders, ...publicFolders],\n    });\n    publicFolders.forEach((folderInfo) => {\n      PubSub.publish(ADD_PUBLIC_FOLDER_TOPIC, folderInfo);\n    });\n\n    if (this.state.selectedMap === \"amap\") {\n      await addMarkerToAMap(privatePhotos);\n    }\n\n    PubSub.publish(FIT_MARKERS_TOPIC);\n  };\n\n  handleAMapInstanceCreated = () => {\n    debug(\"handleAMapInstanceCreated()\", window.AMap);\n    this.setState({ amapLoaded: true });\n  };\n\n  handleSignedOut = () => {\n    this.setState({\n      folders: [],\n    });\n    PubSub.publish(REMOVE_ALL_MARKERS_TOPIC);\n  };\n\n  handleDrawerOpen = () => {\n    PubSub.publish(OPEN_DRAWER_TOPIC);\n  };\n\n  addSubscribers = () => {\n    this.switchMapToken = PubSub.subscribe(\n      SWITCH_MAP_TOPIC,\n      this.switchMapSubscriber\n    );\n    this.showMarkersToken = PubSub.subscribe(\n      SHOW_MARKERS_TOPIC,\n      this.showMarkersSubscriber\n    );\n    this.hideMarkersToken = PubSub.subscribe(\n      HIDE_MARKERS_TOPIC,\n      this.hideMarkersSubscriber\n    );\n  };\n\n  removeSubscribers = () => {\n    PubSub.unsubscribe(this.switchMapToken);\n  };\n\n  switchMapSubscriber = () => {\n    this.setMap(this.state.selectedMap === A_MAP ? GOOGLE_MAP : A_MAP);\n  };\n\n  showMarkersSubscriber = (msg, filter) => {\n    this.updateMarkersInFolderVisible(filter.folderId, true);\n  };\n\n  hideMarkersSubscriber = (msg, filter) => {\n    this.updateMarkersInFolderVisible(filter.folderId, false);\n  };\n\n  updateMarkersInFolderVisible = (folderId, visible) => {\n    const newFolders = this.state.folders.map((folder) => {\n      if (folder.folderId === folderId) {\n        folder.visible = visible;\n      }\n      return folder;\n    });\n    this.setState({ folder: newFolders });\n  };\n\n  setMap = (name) => {\n    this.setState({\n      selectedMap: name,\n    });\n    localStorage.setItem(localStorageKeySelectedMap, name);\n  };\n\n  render() {\n    const { selectedMap, folders, message } = this.state;\n\n    let map = null;\n    if (selectedMap === A_MAP) {\n      map = (\n        <AMap\n          defaultCenter={amapCenter}\n          defaultZoom={16}\n          onMapInstanceCreated={this.handleAMapInstanceCreated}\n        />\n      );\n    } else if (selectedMap === GOOGLE_MAP) {\n      map = (\n        <GoogleMap\n          defaultZoom={16}\n          defaultCenter={googleMapCenter}\n          markers={\n            [\n              /*simpleMarker*/\n            ]\n          }\n          folders={folders}\n        />\n      );\n    }\n\n    return (\n      <div className=\"map-wrapper\">\n        <Message message={message} />\n        {map}\n        <div className=\"menu-btn-wrapper\">\n          <Button onClick={this.handleDrawerOpen}>Menu</Button>\n        </div>\n        <MenuDrawer\n          selectedMap={selectedMap}\n          onRenderFinish={this.handleRenderFinish}\n          onLoginSuccess={this.handleLoginSuccess}\n          onSignedOut={this.handleSignedOut}\n          onMapChange={this.handleMapChange}\n        />\n      </div>\n    );\n  }\n}\n","export const getMarkersInFolder = (map, folderId) => {\n  const markersInFolder = [];\n  const markers = map.getAllOverlays(\"marker\");\n  markers.forEach((marker) => {\n    if (marker.getExtData().folderId === folderId) {\n      markersInFolder.push(marker);\n    }\n  });\n  return markersInFolder;\n};\n","import React, { Component } from \"react\";\nimport { Map } from \"react-amap\";\nimport PubSub from \"pubsub-js\";\nimport debugModule from \"debug\";\n\nimport { FIT_MARKERS_TOPIC } from \"../\";\nimport { getMarkersInFolder } from \"./helpers\";\n\nimport \"./index.css\";\n\nconst debug = debugModule(\"photo-map:src/Application/Map/AMap/index.jsx\");\n\nexport const ADD_MARKERS_TOPIC = \"amap.addmarkers\";\nexport const REMOVE_ALL_MARKERS_TOPIC = \"amap.removeallmarkers\";\nexport const REMOVE_MARKERS_IN_FOLDER_TOPIC = \"amap.removemarkersinfolder\";\nexport const SHOW_MARKERS_TOPIC = \"amap.showmarkers\";\nexport const HIDE_MARKERS_TOPIC = \"amap.hidemarkers\";\n\n/**\n * AMap\n * @export\n * @class AMap\n * @extends {Component}\n *\n * How to use AMap API\n * ```js\n * const {map} = this.aMapRef.current\n * // map.getAllOverlays()\n * // map.setFitView()\n * ```\n */\nexport default class AMap extends Component {\n  // AMap instance\n  map = null;\n  // An array of AMap.Marker instances\n  allMarkers = [];\n\n  componentDidMount() {\n    this.addSubscribers();\n  }\n\n  componentWillUnmount() {\n    this.removeSubscribers();\n  }\n\n  addSubscribers = () => {\n    this.addMarkersToken = PubSub.subscribe(\n      ADD_MARKERS_TOPIC,\n      this.addMarkersSubscriber\n    );\n    this.removeAllMarkersToken = PubSub.subscribe(\n      REMOVE_ALL_MARKERS_TOPIC,\n      this.removeAllMarkersSubscriber\n    );\n    this.removeMarkersInFolderToken = PubSub.subscribe(\n      REMOVE_MARKERS_IN_FOLDER_TOPIC,\n      this.removeMarkersInFolderSubscriber\n    );\n    this.showMarkersToken = PubSub.subscribe(\n      SHOW_MARKERS_TOPIC,\n      this.showMarkersSubscriber\n    );\n    this.hideMarkersToken = PubSub.subscribe(\n      HIDE_MARKERS_TOPIC,\n      this.hideMarkersSubscriber\n    );\n    this.fitMarkersToken = PubSub.subscribe(\n      FIT_MARKERS_TOPIC,\n      this.fitMarkersSubscriber\n    );\n  };\n\n  removeSubscribers = () => {\n    PubSub.unsubscribe(this.addMarkersToken);\n    PubSub.unsubscribe(this.removeAllMarkersToken);\n    PubSub.unsubscribe(this.removeMarkersInFolderToken);\n    PubSub.unsubscribe(this.showMarkersToken);\n    PubSub.unsubscribe(this.hideMarkersToken);\n  };\n\n  addMarkersSubscriber = (msg, data) => {\n    this.addMarkers(data.files, data.visible, data.folderId);\n  };\n\n  removeMarkersInFolderSubscriber = (msg, data) => {\n    this.removeMarkersInFolder(data.folderId);\n  };\n\n  removeAllMarkersSubscriber = (msg) => {\n    this.removeAllMarkers();\n  };\n\n  showMarkersSubscriber = (msg, filter) => {\n    this.updateMarkersInFolderVisible(filter.folderId, true);\n  };\n\n  hideMarkersSubscriber = (msg, filter) => {\n    this.updateMarkersInFolderVisible(filter.folderId, false);\n  };\n\n  fitMarkersSubscriber = (msg) => {\n    if (!this.map) {\n      console.error(\"this.map of AMap is undefined!\");\n      return;\n    }\n\n    // Fitbounds to all the markers\n    this.map.setFitView();\n  };\n\n  updateMarkersInFolderVisible = (folderId, visible) => {\n    getMarkersInFolder(this.map, folderId).forEach((marker) => {\n      if (visible) {\n        marker.show();\n      } else {\n        marker.hide();\n      }\n    });\n\n    // Fitbounds to all the markers\n    this.map.setFitView();\n  };\n\n  genMarker = (photo, folderId, visible) =>\n    new window.AMap.Marker({\n      map: this.map,\n      visible,\n      position: photo.lnglat,\n      icon: new window.AMap.Icon({\n        // width/height used in <div> tag which wraps the <img> tag\n        size: new window.AMap.Size(64, 64),\n        image: photo.thumbnail,\n        // width/height used in <img> tag\n        imageSize: new window.AMap.Size(64, 64),\n        // 图标取图偏移量\n        // imageOffset: new AMap.Pixel(-9, -3)\n      }),\n\n      // 设置了 icon 以后，设置 icon 的偏移量，以 icon 的 [center bottom] 为原点\n      // offset: new AMap.Pixel(-13, -30)\n\n      extData: {\n        // folderId=\"__privateFolderId__\" // private folder, because this id will change, we will not use this id\n        // folderId=\"13s5wep_gYYVCroQcFB6nJHMWz8V2Onsr\" // public folder\n        folderId,\n      },\n    });\n\n  addMarkers = (files, visible = true, folderId) => {\n    if (!window.AMap) {\n      alert(\n        \"We are about to convert location from GPS to AMap, but AMap still not loaded!\"\n      );\n      return;\n    }\n\n    const lnglats = [];\n    files.forEach((file) => {\n      lnglats.push([\n        file.imageMediaMetadata.location.longitude,\n        file.imageMediaMetadata.location.latitude,\n      ]);\n    });\n\n    debug(\"window.AMap.convertFrom() loading\");\n    window.AMap.convertFrom(lnglats, \"gps\", (status, result) => {\n      debug(\"window.AMap.convertFrom\", status, result);\n\n      if (result.info === \"ok\") {\n        const photos = result.locations.map((resLnglat, index) => {\n          // resLnglat={Q: 39.877753363716\n          // R: 116.21148084852501\n          // lat: 39.877753\n          // lng: 116.211481}\n          return {\n            lnglat: resLnglat,\n            thumbnail: files[index].thumbnailLink,\n            webViewLink: files[index].webViewLink,\n          };\n        });\n\n        photos.forEach((photo) => {\n          const marker = this.genMarker(photo, folderId, visible);\n          marker.content = `<div><a target=\"_blank\" href=\"${photo.webViewLink}\"><img src=\"${photo.thumbnail}\"></a></div>`;\n          this.allMarkers.push(marker);\n          const markerClick = (event) => {\n            var infoWindow = new window.AMap.InfoWindow({\n              offset: new window.AMap.Pixel(0, -30),\n            });\n            infoWindow.setContent(event.target.content);\n            infoWindow.open(this.map, event.target.getPosition());\n          };\n          marker.on(\"click\", markerClick);\n        });\n\n        // Fitbounds to all the markers\n        this.map.setFitView();\n      }\n    });\n  };\n\n  removeMarkersInFolder = (folderId) => {\n    const markersInFolder = [];\n    const markers = this.map.getAllOverlays(\"marker\");\n    markers.forEach((marker) => {\n      if (marker.getExtData().folderId === folderId) {\n        markersInFolder.push(marker);\n      }\n    });\n    this.map.remove(markersInFolder);\n  };\n\n  removeAllMarkers = () => {\n    this.map.remove(this.allMarkers);\n  };\n\n  render() {\n    const { defaultCenter, defaultZoom } = this.props;\n\n    const events = {\n      created: (instance) => {\n        this.props.onMapInstanceCreated(instance);\n        this.map = instance;\n      },\n      /**\n       * @param {MapsEvent} mapsEvent\n       */\n      click: (mapsEvent) => {\n        debug(\"AMap event: click\", mapsEvent);\n        // @type {LngLat} https://lbs.amap.com/api/javascript-api/reference/core#LngLat\n        const lngLat = mapsEvent.lnglat;\n        console.log(`You click on the AMap, lngLat: ${lngLat.toString()}`);\n      },\n    };\n\n    // Add onInstanceCreated prop to <Map> will cause events.created not fired.\n    return (\n      <div className=\"amap-wrapper\">\n        <Map\n          amapkey={process.env.REACT_APP_AMAP_API_KEY}\n          version=\"1.4.15\"\n          center={defaultCenter}\n          zoom={defaultZoom}\n          events={events}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport debugModule from \"debug\";\n\nconst debug = debugModule(\"photo-map:src/Application/MapSelector.jsx\");\n\nconst radioStyle = {\n  display: \"block\",\n  height: \"30px\",\n  lineHeight: \"30px\",\n};\n\nexport default function MapSelector(props) {\n  debug(\"render()\");\n\n  const { selectedMap } = props;\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n    props.onChange && props.onChange(value);\n  };\n\n  return (\n    <div className=\"map-selector\">\n      <h3>Choose Map:</h3>\n      <Radio.Group onChange={handleChange} value={selectedMap}>\n        <Radio style={radioStyle} value=\"amap\">\n          AMap\n        </Radio>\n        <Radio style={radioStyle} value=\"google\">\n          Google Maps\n        </Radio>\n      </Radio.Group>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport ReactGA from \"react-ga\";\n\nimport HelpTip from \"../components/HelpTip\";\n\nexport default class Title extends Component {\n  render() {\n    return (\n      <span>\n        Photo Map{\" \"}\n        <HelpTip>\n          <div>\n            Please read the{\" \"}\n            <ReactGA.OutboundLink\n              eventLabel=\"HowToUse\"\n              to=\"https://github.com/photo-map/photo-map.github.io/blob/master/help/HOW_TO_USE.md#how-to-use\"\n              target=\"_blank\"\n            >\n              How to use\n            </ReactGA.OutboundLink>{\" \"}\n            document in GitHub repo.\n          </div>\n        </HelpTip>\n      </span>\n    );\n  }\n}\n","import ReactGA from \"react-ga\";\nimport debugModule from \"debug\";\n\nconst debug = debugModule(\n  \"photo-map:src/Application/helpers/renderGoogleLoginBtn.js\"\n);\n\nexport default function renderGoogleLoginBtn(props, auth2) {\n  debug(\"renderGoogleLoginBtn()\", props, auth2);\n\n  /**\n   * User signed in by clicking button.\n   * @param {gapi.auth2.GoogleUser} user\n   */\n  const onSuccess = (user) => {\n    debug(\"onSuccess()\", user);\n    debug(\"User signed in by clicking button.\");\n    ReactGA.event({\n      category: \"Auth\",\n      action: \"User login\",\n    });\n    props.onLoginSuccess(user);\n  };\n  const onFailure = (error) => {\n    debug(\"onFailure(), error:\", error);\n  };\n  /**\n   * @param {bool} a\n   */\n  const signinChanged = (a) => {\n    debug(\"signinChanged()\", a);\n  };\n  /**\n   * @param {gapi.auth2.GoogleUser} user\n   */\n  const userChanged = (user) => {\n    debug(\"userChanged()\", user);\n  };\n  auth2.attachClickHandler(\n    \"custom-google-login-button\",\n    {},\n    onSuccess,\n    onFailure\n  );\n\n  auth2.isSignedIn.listen(signinChanged);\n  // API: https://developers.google.com/identity/sign-in/web/reference#googleauthcurrentuserlistenlistener\n  auth2.currentUser.listen(userChanged); // This is what you use to listen for user changes\n\n  window.gapi.load(\"signin2\", () => {\n    debug(\"signin2 loaded\");\n\n    /**\n     * User already signed in when rendering button.\n     * @param {gapi.auth2.GoogleUser} user\n     */\n    const handleSuccess = (user) => {\n      debug(\"handleSuccess()\", user);\n      debug(\"User already signed in when rendering button.\");\n      props.onLoginSuccess(user);\n    };\n    const handleFailure = (a, b, c) => {\n      debug(\"handleFailure\", a, b, c);\n    };\n\n    // API https://developers.google.com/identity/sign-in/web/reference#gapisignin2renderid_options\n    window.gapi.signin2.render(\"custom-google-login-button\", {\n      onsuccess: handleSuccess,\n      onfailure: handleFailure,\n    });\n\n    props.onRenderFinish();\n  });\n}\n","import React, { Component } from \"react\";\nimport ReactGA from \"react-ga\";\nimport debugModule from \"debug\";\n\nimport { gapiOAuthClientId } from \"../config\";\nimport renderGoogleLoginBtn from \"../helpers/renderGoogleLoginBtn\";\n\nconst debug = debugModule(\n  \"photo-map:src/Application/MenuDrawer/GoogleLogin.jsx\"\n);\nconst scopeNeeded = [\n  \"profile\",\n  \"email\",\n  \"https://www.googleapis.com/auth/drive\",\n  // \"https://www.googleapis.com/auth/photoslibrary.readonly\",\n].join(\" \");\n\n/**\n * Google Login Button\n * ## References\n * - https://developers.google.com/identity/sign-in/web/build-button#customizing_the_automatically_rendered_sign-in_button_recommended\n * - https://stackoverflow.com/questions/31610461/using-google-sign-in-button-with-react\n * - https://developers.google.com/identity/sign-in/web/reference#gapisignin2renderid_options\n */\nexport default class GoogleLogin extends Component {\n  state = {\n    gapiAuth2Loaded: false,\n    signedIn: false,\n  };\n\n  componentDidMount() {\n    const gapiAuth2Loaded = () => {\n      debug(\"auth2 loaded\");\n\n      this.setState({ gapiAuth2Loaded: true });\n\n      const auth2 = window.gapi.auth2.init({\n        client_id: gapiOAuthClientId,\n        scope: scopeNeeded,\n      });\n\n      renderGoogleLoginBtn(\n        {\n          onLoginSuccess: (user) => {\n            this.setState({ signedIn: true });\n            this.props.onLoginSuccess(user);\n          },\n          onRenderFinish: this.props.onRenderFinish,\n        },\n        auth2\n      );\n    };\n\n    // https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiloadlibraries-callbackorconfig------\n    window.gapi.load(\"auth2\", gapiAuth2Loaded);\n  }\n\n  handleSignOutBtnClick = () => {\n    // https://developers.google.com/identity/sign-in/web/reference#gapiauth2getauthinstance\n    const googleAuth = window.gapi.auth2.getAuthInstance();\n    googleAuth.signOut().then(() => {\n      debug(\"User signed out by clicking button.\");\n      ReactGA.event({\n        category: \"Auth\",\n        action: \"User logout\",\n      });\n      this.setState({ signedIn: false });\n      this.props.onSignedOut();\n    });\n  };\n\n  renderLoginBtn = () => {\n    const googleAuth = window.gapi.auth2.getAuthInstance();\n\n    if (googleAuth && googleAuth.isSignedIn.get()) {\n      // Already signed in, hide login button.\n      return null;\n    }\n\n    // TODO need to call gapi to render the button again on this empty tag\n    return <div id=\"custom-google-login-button\" />;\n  };\n\n  renderSignOutBtn = () => {\n    if (!this.state.signedIn) {\n      return null;\n    }\n    return <button onClick={this.handleSignOutBtnClick}>Sign out</button>;\n  };\n\n  render() {\n    if (!this.state.gapiAuth2Loaded) {\n      return <div>The \"auth2\" gapi library doesn't loaded yet.</div>;\n    }\n\n    return (\n      <div>\n        <h3>Google Login</h3>\n        {this.renderLoginBtn()}\n        {this.renderSignOutBtn()}\n      </div>\n    );\n  }\n}\n","export const gaTrackId = \"UA-48270916-5\";\nexport const gapiOAuthClientId =\n  \"769870583187-6p6tvl5nh7qc8m9hrgqh285siqm9oc37.apps.googleusercontent.com\";\n","import {\n  localStorageKeyPrivateFolderVisible,\n  localStorageKeyPublicFolders,\n} from \"./FolderList\";\nimport { localStorageKeySelectedMap } from \"../Map\";\n\n/**\n * Convert folder web link: https://drive.google.com/drive/folders/13s5wep_gYYVCroQcFB6nJHMWz8V2Onsr?usp=sharing\n * to folder ID: 13s5wep_gYYVCroQcFB6nJHMWz8V2Onsr\n * @param {string} link\n * @returns {string}\n */\nexport const link2Id = (link) =>\n  link\n    .replace(\"https://drive.google.com/drive/folders/\", \"\")\n    .replace(\"?usp=sharing\", \"\");\n\nexport const exportConfig = (localStorage) => {\n  const storageObj = {\n    [localStorageKeyPrivateFolderVisible]: localStorage.getItem(\n      localStorageKeyPrivateFolderVisible\n    ),\n    [localStorageKeyPublicFolders]: localStorage.getItem(\n      localStorageKeyPublicFolders\n    ),\n    [localStorageKeySelectedMap]: localStorage.getItem(\n      localStorageKeySelectedMap\n    ),\n  };\n  const dataStr =\n    \"data:text/json;charset=utf-8,\" +\n    encodeURIComponent(JSON.stringify(storageObj, null, 2));\n  return dataStr;\n};\n\nexport const importConfig = (localStorage, configObj) => {\n  localStorage.setItem(\n    localStorageKeyPrivateFolderVisible,\n    configObj[localStorageKeyPrivateFolderVisible]\n  );\n  localStorage.setItem(\n    localStorageKeyPublicFolders,\n    configObj[localStorageKeyPublicFolders]\n  );\n  localStorage.setItem(\n    localStorageKeySelectedMap,\n    configObj[localStorageKeySelectedMap]\n  );\n};\n","import React, { Component } from \"react\";\nimport { Button } from \"antd\";\n\nimport { exportConfig, importConfig } from \"./helpers\";\n\nexport default class ConfigSection extends Component {\n  constructor(props) {\n    super(props);\n    this.downloadRef = React.createRef();\n    this.inputRef = React.createRef();\n    this.state = {\n      href: \"{}\",\n    };\n  }\n\n  handleDownload = () => {\n    this.setState({ href: exportConfig(localStorage) }, () => {\n      if (this.downloadRef && this.downloadRef.current) {\n        this.downloadRef.current.click();\n      } else {\n        alert(\"downloadRef or node is undefined!\");\n      }\n    });\n  };\n\n  handleImport = () => {\n    if (this.inputRef && this.inputRef.current) {\n      this.inputRef.current.click();\n    } else {\n      alert(\"inputRef or node is undefined!\");\n    }\n  };\n\n  // Solution A: https://stackoverflow.com/a/27116209/4685522\n  // Solution B: https://stackoverflow.com/a/48176648/4685522\n  handleChange = async (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const data = await new Response(file).text();\n      var obj = JSON.parse(data);\n      importConfig(localStorage, obj);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>Import/Export application config</h3>\n        <a\n          ref={this.downloadRef}\n          href={this.state.href}\n          style={{ display: \"none\" }}\n          download=\"photo-map-config.json\"\n        >\n          Download Config File\n        </a>\n        <Button onClick={this.handleDownload}>Export</Button>\n        <input\n          ref={this.inputRef}\n          className=\"import-config-file-helper\"\n          type=\"file\"\n          style={{ display: \"none\" }}\n          onChange={this.handleChange}\n        />\n        <Button onClick={this.handleImport}>Import</Button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Drawer, Button, Input, message } from \"antd\";\nimport PubSub from \"pubsub-js\";\nimport debugModule from \"debug\";\n\nimport HelpTip from \"../components/HelpTip\";\nimport { ADD_MARKERS_TOPIC } from \"../Map/AMap\";\nimport { getPhotosInPublicFolder } from \"../Map/helpers\";\nimport MapSelector from \"../Map/MapSelector\";\n\nimport FolderList, { ADD_PUBLIC_FOLDER_TOPIC, decode } from \"./FolderList\";\nimport Title from \"./Title\";\nimport GoogleLogin from \"./GoogleLogin\";\nimport ConfigSection from \"./ConfigSection\";\nimport { link2Id } from \"./helpers\";\n\nconst debug = debugModule(\"photo-map:src/Application/MenuDrawer/index.jsx\");\n\n// Open it\nexport const OPEN_DRAWER_TOPIC = \"menudrawer.open\";\n// Open or close it according to the state\nexport const OPEN_CLOSE_DRAWER_TOPIC = \"menudrawer.openclose\";\n\nexport default class MenuDrawer extends Component {\n  state = {\n    drawerVisible: false,\n    publicFolderLink: \"\",\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.addSubscribers();\n  }\n\n  componentWillUnmount() {\n    this.removeSubscribers();\n  }\n\n  handleDrawerClose = () => {\n    this.setVisible(false);\n  };\n\n  handlePublicFolderLinkChange = (event) => {\n    this.setState({ publicFolderLink: event.target.value });\n  };\n\n  handlePublicFolderInputPressEnter = () => {\n    this.loadPublicFolderAndAddMarkers();\n  };\n\n  handleLoadPublicFolderBtnClick = () => {\n    this.loadPublicFolderAndAddMarkers();\n  };\n\n  loadPublicFolderAndAddMarkers = async () => {\n    if (this.state.loading) {\n      message.warn(\n        \"Previous public folder is loading now, please wait a moment.\"\n      );\n      return;\n    }\n\n    const folderId = link2Id(this.state.publicFolderLink);\n\n    // Check whether folder exists\n    if (decode()[folderId] !== undefined) {\n      message.warn(\"There is an existing public folder!\");\n      return;\n    }\n\n    let folderInfo = null;\n    try {\n      this.setState({ loading: true });\n      folderInfo = await getPhotosInPublicFolder(folderId);\n      this.setState({ loading: false });\n    } catch (error) {\n      console.error(\"failed to get photos in a public folder, error:\", error);\n      message.error(error.message);\n      this.setState({ loading: false });\n      return;\n    }\n\n    PubSub.publish(ADD_PUBLIC_FOLDER_TOPIC, folderInfo);\n    PubSub.publish(ADD_MARKERS_TOPIC, folderInfo);\n  };\n\n  setVisible = (visible) => {\n    this.setState({ drawerVisible: visible });\n  };\n\n  openDrawerSubscriber = (msg) => {\n    this.setVisible(true);\n  };\n\n  openCloseDrawerSubscriber = (msg) => {\n    this.setVisible(!this.state.drawerVisible);\n  };\n\n  addSubscribers = () => {\n    this.openDrawerToken = PubSub.subscribe(\n      OPEN_DRAWER_TOPIC,\n      this.openDrawerSubscriber\n    );\n    this.openCloseDrawerToken = PubSub.subscribe(\n      OPEN_CLOSE_DRAWER_TOPIC,\n      this.openCloseDrawerSubscriber\n    );\n  };\n\n  removeSubscribers = () => {\n    PubSub.unsubscribe(this.openDrawerToken);\n  };\n\n  render() {\n    debug(\"render()\");\n\n    const { selectedMap } = this.props;\n    const { drawerVisible, publicFolderLink } = this.state;\n\n    return (\n      <div className=\"menu-drawer\">\n        <Drawer\n          className=\"menu-drawer\"\n          width={512}\n          title={<Title />}\n          placement=\"left\"\n          closable={false}\n          forceRender\n          visible={drawerVisible}\n          onClose={this.handleDrawerClose}\n        >\n          <MapSelector\n            selectedMap={selectedMap}\n            onChange={this.props.onMapChange}\n          />\n          <GoogleLogin\n            onLoginSuccess={this.props.onLoginSuccess}\n            onRenderFinish={this.props.onRenderFinish}\n            onSignedOut={this.props.onSignedOut}\n          />\n          <div>\n            <div>\n              Public folder link:{\" \"}\n              <HelpTip>\n                <div>\n                  <div>Please fill the public folder link. For example:</div>\n                  <div>\n                    https://drive.google.com/drive/folders/13s5wep_gYYVCroQcFB6nJHMWz8V2Onsr?usp=sharing\n                  </div>\n                </div>\n              </HelpTip>\n            </div>\n            <Input\n              value={publicFolderLink}\n              onChange={this.handlePublicFolderLinkChange}\n              onPressEnter={this.handlePublicFolderInputPressEnter}\n            />\n            <Button\n              disabled={this.state.loading}\n              onClick={this.handleLoadPublicFolderBtnClick}\n            >\n              Load\n            </Button>\n            <hr />\n            <FolderList />\n            <hr />\n            <ConfigSection />\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n","import PubSub from \"pubsub-js\";\nimport ReactGA from \"react-ga\";\n\nimport { gaTrackId } from \"./config\";\nimport { OPEN_CLOSE_DRAWER_TOPIC } from \"./MenuDrawer\";\nimport { SWITCH_MAP_TOPIC } from \"./Map\";\n\nexport const initGa = () => {\n  ReactGA.initialize(gaTrackId, {\n    // debug: true,\n  });\n};\n\nexport const registerShortcut = () => {\n  document.addEventListener(\n    \"keyup\",\n    (event) => {\n      switch (event.code) {\n        // Open or close left menu\n        case \"KeyM\": {\n          PubSub.publish(OPEN_CLOSE_DRAWER_TOPIC);\n          break;\n        }\n        // Switch AMap and Google Maps\n        case \"KeyS\": {\n          PubSub.publish(SWITCH_MAP_TOPIC);\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    },\n    false\n  );\n};\n\n/**\n * After gapi.client is loaded by gapi.load('client'), then you could use method like:\n * ```\n * gapi.client.request()\n * ```\n * https://github.com/google/google-api-javascript-client/blob/master/samples/simpleRequest.html\n * @returns {Promise<undefined>}\n */\nexport const initGapiClient = () =>\n  new Promise((resolve, reject) => {\n    window.gapi.load(\"client\", () => {\n      resolve();\n    });\n  });\n","import React from \"react\";\n\nexport default function Warning() {\n  return (\n    <div className=\"website-warning\">\n      <p>Google API not loaded!</p>\n      <p>Maybe you need to turn off the Adblock Plus for this website.</p>\n      <p>\n        If you still have problem, please{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/photo-map/photo-map.github.io/issues\"\n        >\n          raise an issue\n        </a>{\" \"}\n        in the GitHub project.\n      </p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport { initGa, initGapiClient, registerShortcut } from \"./init\";\nimport Warning from \"./Warning\";\nimport Map from \"./Map\";\n\n// Styles for antd\nimport \"antd/dist/antd.css\";\n// Styles for application\nimport \"./index.css\";\n\nexport default class Application extends Component {\n  state = {\n    gapiLoaded: false, // Google API loaded or not\n    gapiClientLoading: false,\n  };\n\n  componentDidMount() {\n    this.initApplication();\n  }\n\n  initApplication = () => {\n    initGa();\n\n    // window.gapiLoadedFlag is defined in public/index.html\n    // This flag is true only when Google API's platform.js is loaded, .\n    if (window.gapiLoadedFlag) {\n      this.setState({\n        gapiLoaded: true,\n      });\n      this.loadGapiClient();\n    }\n\n    registerShortcut();\n  };\n\n  loadGapiClient = () => {\n    this.setState({\n      gapiClientLoading: true,\n    });\n    initGapiClient().then(() => {\n      this.setState({\n        gapiClientLoading: false,\n      });\n    });\n  };\n\n  render() {\n    if (!this.state.gapiLoaded) {\n      return <Warning />;\n    }\n\n    if (this.state.gapiClientLoading) {\n      return <div>gapi client lib is loading</div>;\n    }\n\n    return (\n      <div className=\"application\">\n        <Map />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Application from \"./Application\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <Application />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}